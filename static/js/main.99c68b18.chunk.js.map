{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["diagramInstance","flowshapes","id","shape","scale","type","content","connectorSymbols","sourcePoint","x","y","targetPoint","targetDecorator","style","strokeWidth","gridlines","lineColor","lineIntervals","useState","palettes","setPalettes","loading","setLoading","useEffect","console","log","getEdges","setTimeout","expanded","symbols","iconCss","title","window","matchMedia","matches","paletteIcon","document","getElementById","addEventListener","addEvents","fitToPage","className","width","onClick","getPersistData","getActiveLayer","getDiagramContent","getConnectorObject","savedData","saveDiagram","loadDiagram","float","role","margin","expandMode","height","symbolHeight","symbolWidth","getNodeDefaults","symbol","symbolMargin","left","right","top","bottom","getSymbolInfo","fit","ref","diagram","snapSettings","horizontalGridlines","verticalGridlines","args","node","obj","undefined","ratio","fill","strokeColor","annotations","color","ports","offset","getConnectorDefaults","indexOf","doubleClick","dragEnter","element","Node","oWidth","oHeight","offsetX","offsetY","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99c68b18.chunk.js","sourcesContent":["import './index.css';\nimport React, { useEffect, useState } from \"react\";\nimport { DiagramComponent, SymbolPaletteComponent, Node } from \"@syncfusion/ej2-react-diagrams\";\nimport './App.css'\n/**\n * Diagram Default sample\n */\n\n//Initialize the flowshapes for the symbol palatte\nlet flowshapes = [\n    {\n        id: \"servicenow\", shape: {\n            scale: 'Stretch',\n  type: 'Native', content: (`<g>\n  <rect x=\"0\" y=\"0\" width=\"300\" height=\"300\" fill=\"white\" stroke=\"black\" border=\"1px solid black\"></rect>\n  <image xlink:href=\"https://www.eweek.com/imagesvr_ez/b2bezp/2020/01/ServiceNow.logo.jpg?alias=article_hero\" x=\"20\" y=\"20\" width=\"200px\" height=\"250px\" />\n  <text x=\"15\" y=\"250\" font-family=\"Arial\" line-height=\"2.6\" font-size=\"20\" fill=\"black\">Service Now</text>\n</g>`),\n       }\n    },\n    {\n        id: \"mysql\", shape: {\n            scale: 'Stretch',\n  type: 'Native', content: (`<g>\n  <rect x=\"0\" y=\"0\" width=\"300\" height=\"300\" fill=\"white\" stroke=\"black\" border=\"1px solid black\"></rect>\n  <image xlink:href=\"https://pbs.twimg.com/profile_images/1255113654049128448/J5Yt92WW_400x400.png\" x=\"20\" y=\"20\" width=\"200px\" height=\"250px\" />\n<text x=\"15\" y=\"250\" font-family=\"Arial\" line-height=\"2.6\" font-size=\"20\" fill=\"black\" onClick={handleClick}>My SQL</text>\n</g>`),\n       }\n    },\n    {\n        id: \"platformDataLake\", shape: {\n            scale: 'Stretch',\n  type: 'Native', content: (`<g>\n  <rect x=\"0\" y=\"0\" width=\"300\" height=\"300\" fill=\"white\" stroke=\"black\" border=\"1px solid black\"></rect>\n  <image xlink:href=\"https://image.shutterstock.com/image-vector/database-vector-icon-server-storage-260nw-577507285.jpg\" x=\"20\" y=\"20\" width=\"200px\" height=\"250px\" />\n  <text x=\"15\" y=\"250\" font-family=\"Arial\" line-height=\"2.6\" font-size=\"20\" fill=\"black\">Platform Data Lake</text>\n</g>`),\n       }\n    },\n    {\n        id: \"incidentsAnalysis\", shape: {\n            scale: 'Stretch',\n  type: 'Native', content: (`<g>\n  <rect x=\"0\" y=\"0\" width=\"300\" height=\"300\" fill=\"white\" stroke=\"black\" border=\"1px solid black\"></rect>\n  <image xlink:href=\"https://www.eweek.com/imagesvr_ez/b2bezp/2020/01/ServiceNow.logo.jpg?alias=article_hero\" x=\"20\" y=\"20\" width=\"200px\" height=\"250px\" />\n  <text x=\"15\" y=\"250\" font-family=\"Arial\" line-height=\"2.6\" font-size=\"20\" fill=\"black\">Incidents Analysis</text>\n</g>`),\n       }\n    },\n    {\n        id: \"insights\", shape: {\n            scale: 'Stretch',\n  type: 'Native', content: (`<g>\n  <rect x=\"0\" y=\"0\" width=\"300\" height=\"300\" fill=\"white\" stroke=\"black\" border=\"1px solid black\"></rect>\n  <image xlink:href=\"https://cdn.app.compendium.com/uploads/user/e7c690e8-6ff9-102a-ac6d-e4aebca50425/68403f67-17f5-49cb-b691-91ad3e27ebf1/File/bfa2a8d2c8d8c786c334d9ac01dfc629/1__ffpkcwd_kwqmc7oevcrbq.jpeg\" x=\"20\" y=\"20\" width=\"200px\" height=\"250px\" />\n  <text x=\"15\" y=\"250\" font-family=\"Arial\" line-height=\"2.6\" font-size=\"20\" fill=\"black\">Insights</text>\n</g>`),\n       }\n    },\n    {\n        id: \"dashboardDesigner\", shape: {\n            scale: 'Stretch',\n  type: 'Native', content: (`<g>\n  <rect x=\"0\" y=\"0\" width=\"300\" height=\"300\" fill=\"white\" stroke=\"black\" border=\"1px solid black\"></rect>\n  <image xlink:href=\"https://i.dlpng.com/static/png/6988411_preview.png\" x=\"20\" y=\"20\" width=\"200px\" height=\"250px\" />\n  <text x=\"15\" y=\"250\" font-family=\"Arial\" line-height=\"2.6\" font-size=\"20\" fill=\"black\">Dashboard Designer</text>\n</g>`),\n       }\n    },\n    {\n        id: \"qlikSense\", shape: {\n            scale: 'Stretch',\n  type: 'Native', content: (`<g>\n  <rect x=\"0\" y=\"0\" width=\"300\" height=\"300\" fill=\"white\" stroke=\"black\" border=\"1px solid black\"></rect>\n  <image xlink:href=\"https://is1-ssl.mzstatic.com/image/thumb/Purple113/v4/af/15/07/af1507d8-35ff-f9d3-46be-401d002a8ab2/AppIcon-0-0-1x_U007emarketing-0-0-0-7-0-0-sRGB-0-0-0-GLES2_U002c0-512MB-85-220-0-0.png/246x0w.png\" x=\"20\" y=\"20\" width=\"200px\" height=\"250px\" />\n  <text x=\"15\" y=\"250\" font-family=\"Arial\" line-height=\"2.6\" font-size=\"20\" fill=\"black\">Qlik Sense</text>\n</g>`),\n       }\n    }\n];\n//Initializes connector symbols for the symbol palette\nlet connectorSymbols = [\n    {\n        id: \"Link1\",\n        type: \"Orthogonal\",\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: \"Arrow\" },\n        style: { strokeWidth: 1 }\n    },\n    {\n        id: \"link3\",\n        type: \"Orthogonal\",\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        style: { strokeWidth: 1 },\n        targetDecorator: { shape: \"None\" }\n    },\n    {\n        id: \"Link21\",\n        type: \"Straight\",\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        targetDecorator: { shape: \"Arrow\" },\n        style: { strokeWidth: 1 }\n    },\n    {\n        id: \"link23\",\n        type: \"Straight\",\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        style: { strokeWidth: 1 },\n        targetDecorator: { shape: \"None\" }\n    },\n    {\n        id: \"link33\",\n        type: \"Bezier\",\n        sourcePoint: { x: 0, y: 0 },\n        targetPoint: { x: 60, y: 60 },\n        style: { strokeWidth: 1 },\n        targetDecorator: { shape: \"None\" }\n    }\n];\nlet interval;\ninterval = [\n    1,\n    9,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75,\n    0.25,\n    9.75\n];\nlet gridlines = {\n    lineColor: \"#e0e0e0\",\n    lineIntervals: interval\n};\nlet diagramInstance;\nexport default () => {\n\n    const [palettes, setPalettes] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    const handleSave = () => {\n        if(diagramInstance){\n            console.log(diagramInstance.getPersistData())\n            console.log(diagramInstance.getActiveLayer())\n            console.log(diagramInstance.getDiagramContent())\n            console.log(diagramInstance.getConnectorObject())\n            const savedData = diagramInstance.saveDiagram()\n            console.log('saveddata', savedData)\n            setTimeout(() => {\n                diagramInstance.loadDiagram(savedData)\n            }, 5000)\n            \n        }\n    }\n\n    useEffect(() => {\n        if(diagramInstance){\n            console.log(diagramInstance.getEdges())\n\n        }\n    })\n\n    useEffect(() => {\n        setTimeout(() => {\n            setPalettes([\n                {\n                    id: \"flow\",\n                    expanded: true,\n                    symbols: flowshapes,\n                    iconCss: \"e-diagram-icons1 e-diagram-flow\",\n                    title: \"Flow Shapes\"\n                },\n                {\n                    id: \"connectors\",\n                    expanded: true,\n                    symbols: connectorSymbols,\n                    iconCss: \"e-diagram-icons1 e-diagram-connector\",\n                    title: \"Connectors\"\n                }\n            ]) \n            setLoading(false) \n        }, 1000)\n    }, [])\n\n    useEffect(() => {\n        setTimeout(() => {\n            addEvents();\n            diagramInstance.fitToPage();\n        })\n        \n    }, [])\n\n        return (<div className=\"control-pane\">\n        <div className=\"control-section\">\n          <div style={{ width: \"100%\" }}>\n              <button onClick={handleSave}>Save</button>\n            <div className=\"sb-mobile-palette-bar\">\n              <div id=\"palette-icon\" style={{ float: \"right\", role: \"button\" }} className=\"e-ddb-icons1 e-toggle-palette\"></div>\n            </div>\n            <div id=\"palette-space\" className=\"sb-mobile-palette\">\n                {\n                    loading && <div style={{margin: '50px'}}>Loading Palette in 5 seconds...</div>\n                }\n                {\n                    !loading && \n                \n              <SymbolPaletteComponent id=\"symbolpalette\" expandMode=\"Multiple\" palettes={palettes} width={\"100%\"} height={\"700px\"} symbolHeight={260} symbolWidth={260} getNodeDefaults={(symbol) => {\n                  \n            if (symbol.id === \"Terminator\" ||\n                symbol.id === \"Process\" ||\n                symbol.id === \"Delay\") {\n                symbol.width = 80;\n                symbol.height = 40;\n            }\n            else if (symbol.id === \"Decision\" ||\n                symbol.id === \"Document\" ||\n                symbol.id === \"PreDefinedProcess\" ||\n                symbol.id === \"PaperTap\" ||\n                symbol.id === \"DirectData\" ||\n                symbol.id === \"MultiDocument\" ||\n                symbol.id === \"Data\") {\n                symbol.width = 50;\n                symbol.height = 40;\n            }\n            else {\n                symbol.width = 50;\n                symbol.height = 50;\n            }\n        }} symbolMargin={{ left: 15, right: 15, top: 15, bottom: 15 }} getSymbolInfo={(symbol) => {\n            return { fit: true };\n        }}/>\n        }\n            </div>\n            <div id=\"diagram-space\" className=\"sb-mobile-diagram\">\n              <DiagramComponent id=\"diagram\" ref={diagram => (diagramInstance = diagram)} width={\"100%\"} height={\"700px\"} snapSettings={{\n            horizontalGridlines: gridlines,\n            verticalGridlines: gridlines\n        }} \n        getEdges={(args) => {console.log('diagram edges', args)}} \n        getNodeDefaults={(node) => {\n            let obj = {};\n            if (obj.width === undefined) {\n                obj.width = 145;\n            }\n            else {\n                let ratio = 100 / obj.width;\n                obj.width = 100;\n                obj.height *= ratio;\n            }\n            obj.style = { fill: \"#357BD2\", strokeColor: \"white\" };\n            obj.annotations = [\n                { style: { color: \"white\", fill: \"transparent\" } }\n            ];\n            //Set ports\n            obj.ports = getPorts(node);\n            return obj;\n        }} //Sets the default values of a connector\n         getConnectorDefaults={(obj) => {\n            if (obj.id.indexOf(\"connector\") !== -1) {\n                obj.type = \"Orthogonal\";\n                obj.targetDecorator = {\n                    shape: \"Arrow\",\n                    width: 10,\n                    height: 10\n                };\n            }\n        }} \n        //Sets the Node style for DragEnter element.\n        doubleClick={(args) => {\n            console.log('double clicked', args)\n        }}\n        dragEnter={(args) => {\n            let obj = args.element;\n            if (obj instanceof Node) {\n                let oWidth = obj.width;\n                let oHeight = obj.height;\n                let ratio = 100 / obj.width;\n                obj.width = 100;\n                obj.height *= ratio;\n                obj.offsetX += (obj.width - oWidth) / 2;\n                obj.offsetY += (obj.height - oHeight) / 2;\n                obj.style = { fill: \"#357BD2\", strokeColor: \"white\" };\n            }\n        }}/>\n            </div>\n          </div>\n        </div>\n      </div>);\n    }\nfunction getPorts(obj) {\n    let ports = [\n        { id: \"port1\", shape: \"Circle\", offset: { x: 0, y: 0.5 } },\n        { id: \"port2\", shape: \"Circle\", offset: { x: 0.5, y: 1 } },\n        { id: \"port3\", shape: \"Circle\", offset: { x: 1, y: 0.5 } },\n        { id: \"port4\", shape: \"Circle\", offset: { x: 0.5, y: 0 } }\n    ];\n    return ports;\n}\nlet isMobile;\nfunction addEvents() {\n    isMobile = window.matchMedia('(max-width:550px)').matches;\n    if (isMobile) {\n        let paletteIcon = document.getElementById('palette-icon');\n        if (paletteIcon) {\n            paletteIcon.addEventListener('click', () => {}, false);\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@syncfusion/ej2-react-diagrams/styles/material.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}